name: Build and Release
permissions: write-all

on:
  push:
    branches:
      - main  # You can change this to match your main branch name
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight UTC
  workflow_dispatch:
    

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install packages
        run: sudo apt-get install -y unzip qemu-utils rsync gdisk
      - name: Run build script
        run: sudo bash build.bash
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: ./chr*
      - name: Get RouterOS version number
        id: get-versions
        run: |
          ROSTEST=`curl https://download.mikrotik.com/routeros/NEWESTa7.testing | awk '{print $1}'`
          ROSSTABLE=`curl https://download.mikrotik.com/routeros/NEWESTa7.stable | awk '{print $1}'`
          echo "ROSSTABLE=stable" >> $GITHUB_OUTPUT
          echo "ROSTESTING=testing" >> $GITHUB_OUTPUT
      - name: Print versions
        run: |
          echo "The latest stable version is ${{ steps.get-versions.outputs.stable }}"
          echo "The latest testing version is ${{ steps.get-versions.outputs.testing }}"
      - name: Push Git Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag Build${{ github.run_id }}
          git push origin Build${{ github.run_id }}
            
      - name: Create Release
        id: create-release-testing
        uses: actions/create-release@v1 # comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Build${{ github.run_id }} # ${{ github.ref }}
          release_name: ${{ steps.get-versions.outputs.testing }} ${{ github.run_id }}
          body: |
            UEFI-enabled CHR image for ${{ steps.get-versions.outputs.testing }}, from build ${{ github.run_id }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release-testing.outputs.upload_url }}
          asset_path: ./chr-${{ steps.get-versions.outputs.testing }}.uefi-fat.raw
          asset_name: chr-${{ steps.get-versions.outputs.testing }}.uefi-fat.raw
          asset_content_type: application/octet-stream