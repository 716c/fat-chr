name: Build and Release
permissions: write-all

on:
  push:
    branches:
      - main  # You can change this to match your main branch name
  schedule:
    - cron: '0 0 * * 1'  # Run every Monday at midnight UTC
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string
        default: "7.14"
    

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        channel: [stable, longterm, testing, dev]
        include: 
          - channel: custom
            if: ${{ github.event_name == 'workflow_dispatch' }}
        exclude:
          - channel: dev
          - channel: longterm
          - channel: stable
            if: ${{ github.event_name != 'workflow_dispatch' }}
          - channel: testing
            if: ${{ github.event_name != 'workflow_dispatch' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install packages into building machine
        run: sudo apt-get install -y unzip qemu-utils rsync gdisk
      - name: Set version if release channel name
        id: get-version
        if: ${{ matrix.channel != 'custom' }}
        run: |
          ROS7=`curl https://download.mikrotik.com/routeros/NEWESTa7.${{matrix.channel}} | awk '{print $1}'`
          echo "ROSVER=$ROS7" >> $GITHUB_ENV
      - name: Set version if custom version
        id: get-version-custom
        if: ${{ matrix.channel == 'custom' }}
        run: |
          echo "ROSVER=${{ github.event.inputs.version }}" >> $GITHUB_ENV
      - name: Print versions for debugging
        run: |
          echo "Build using $ROSVER"  
      - name: Run script to download and modify the CHR images
        run: sudo bash build.bash
      - name: Upload created image files as artifacts of build
        uses: actions/upload-artifact@v2
        with:
          name: build-artifacts
          path: ./chr*
      - name: Push git tag to save builder's code (required for release)
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag Build${{ github.run_id }}-${{matrix.channel}}
          git push origin Build${{ github.run_id }}
      - name: Create GitHub release
        id: create-release
        uses: actions/create-release@v1 # comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: Build${{ github.run_id }}-${{matrix.channel}} # ${{ github.ref }}
          release_name: ${{ env.ROSVER }}
          body: |
            UEFI-enabled CHR image from builder ${{ github.run_id }}
            for ${{ env.ROSVER }}
          draft: true
          prerelease: true
      - name: Upload CHR TESTING image to release
        id: upload-release-asset-testing
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./chr-${{  env.ROSVER  }}.uefi-fat.raw
          asset_name: chr-${{  env.ROSVER  }}.uefi-fat.raw
          asset_content_type: application/octet-stream
      - name: Upload VMDK CHR TESTING image to release
        id: upload-release-asset-testing-vmdk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./chr-${{  env.ROSVER  }}.uefi-fat.vmdk
          asset_name: chr-${{  env.ROSVER  }}.uefi-fat.vmdk
          asset_content_type: application/octet-stream